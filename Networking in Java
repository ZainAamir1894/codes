//SERVER CODE

//import statements for input-output

/import java.io.;
import java.net.*;

//class named Server
public class Server{
    //main class with Exception in case of any issue with Server
    public static void main(String[] args) throws IOException{
        
        //Class of ServerSocket with object to get a socket number
        ServerSocket serverSocket = new ServerSocket(1894);
          System.out.println("Server Online, Waiting for the client to connect");
        
        //Class of Socket with clientSocket object which .accepts the client's socket
        Socket clientSocket = serverSocket.accept();
          System.out.println("Client successfully connected!");
        
        //input stream for data
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        
        //output stream for data and then simultaneously flushing the data
           PrintWriter out = new PrintWriter(clientSocket.getOutputStream(),true);
        
        
        //reading the data from the client(taking input)
         String message = in.readLine();
           System.out.println("Client says: " + message);
              System.out.println("Your message has been recieved by the server!");
        
        //closing both of the sockets
        clientSocket.close();
          serverSocket.close();
    }
}*/

//CLIENT CODE

//import statements for input-output
/import java.io.;
import java.net.*;

//class named Client
public class Client{
    
    //main class with Exception in case of any error from client's side
    public static void main(String[] args)throws IOException{
        
       //Class and object of clientSocket to get port number from client (localhost if same device) 
        ClientSocket clientSocket = new ClientSocket("localhost" , 1894);
        
        //output stream 1st then input so there isn't a deadlock
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(),true);
        
        //input stream
        BufferedReader in = new BufferedReader(new(clientSocket.getInputStream()));
          System.out.println("Client says hello!");
        
        //For Server's response
        String response = in.readLine();
          System.out.println("The server says: " + response);
        
        //closing the clientSocket
        clientSocket.close();
    }
}*/

//----------------------------------------------------------------------------------------------------------------------
//TCPClient when both server and client are on same device

//necessary import statements for input/output and networking principles 
*/import java.io.*;
import java.net.*;

//public class
public class Main{
   //method for client function
       public static void ClientFunc() throws Exception{
           //Socket class/object which depends on a localhost ip and a device port no.
            Socket socket = new Socket("localhost" , 8888);

              //For input from the server we use an InputStreamReader to convert raw bytes into characters and the socket gets it
               BufferedReader inputFromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));

             //To write to the server we'll use OutputStream with a PrintWriter class
                  PrintWriter outputToServer = new PrintWriter(socket.getOutputStream());

            //For transmitting the data between client-server through keyboard and giving input
                     BufferedWriter keyboard = new BufferedReader(new InputStreamReader(System.in));

              //Two String type objects to recieve message from Server and for sending message to Server 
                 String msgFromServer, msgToServer;

                   //infinite loop til function breaks
                    while(true){
                   System.out.println("Client says: ");

                  //To send the message to server we use the keyboard object which reads all the data further
                    msgToServer = keyboard.readLine();

                   //printing the message
                      outputToServer.println(msgToServer);

                  //if message to the server is empty then exiting 
                      if(msgToServer == null || msgToServer.equalsIgnoreCase("exit")) break;

                      //To receive the message from the server we use the inputFromServer object and read the data
                          msgFromServer = inputFromServer.readLine();

                  //If we send an empty message(no message) then exiting
                      if(msgFromServer == null || msgFromServer.equalsIgnoreCase("exit") break;

                         System.out.println("Server says: " + msgFromServer);
        }

        //Closing the socket and then client disconnects 
         socket.close();
         System.out.println("Client Offline...");
    }

     //Method for sending the message
     public static void send(String ip, int port, String msg){
       try(Socket socket = new Socket(ip, port);
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true))
       {
        out.println(msg);
         }
     }

 //Method for recieving the response 
     public static void getResponse(String ip, int port){
      try(Socket socket = new Socket(ip, port);
      BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())){
          String response = in.readLine();
          if(response != null){
             System.out.println("Server says: " + response);
            } else {
             System.out.println("No response from server.");
             }
         }
    }
}*/
//----------------------------------------------------------------------------------------------------------
//TCPServer (for same device)

/*import java.io.*;
import java.net.*;

public class Main {
    public static void ServerFunc() throws Exception {
        ServerSocket serverSocket = new ServerSocket(8888);
          System.out.println("Server online. Waiting for client to connect....");

          //accepting the client socket(client's request)
          Socket clientSocket = serverSocket.accept();
          System.out.println("Client Connected!");

          BufferedReader inputFromClient = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

          PrintWriter outputToClient = new PrintWriter(clientSocket.getOutputStream() , true);

          BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));

          String msgFromClient, msgToClient;

          while(true){
             msgFromClient = inputFromClient.readLine();
             if(msgFromClient == null || msgFromClient.equalsIgnoreCase("exit")) break;
              System.out.println("Client says: " + msgFromClient);

              System.out.println("You: ");
              msgToClient = keyboard.readLine();
              outputToClient.println(msgToClient);

               if(msgToClient == null || msgToClient.equalsIgnoreCase("exit")) break;
          }

          serverSocket.close();
          clientSocket.close();
          System.out.println("Server Offline....");
    }
}*/
