//SERVER CODE

//import statements for input-output

/import java.io.;
import java.net.*;

//class named Server
public class Server{
    //main class with Exception in case of any issue with Server
    public static void main(String[] args) throws IOException{
        
        //Class of ServerSocket with object to get a socket number
        ServerSocket serverSocket = new ServerSocket(1894);
          System.out.println("Server Online, Waiting for the client to connect");
        
        //Class of Socket with clientSocket object which .accepts the client's socket
        Socket clientSocket = serverSocket.accept();
          System.out.println("Client successfully connected!");
        
        //input stream for data
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        
        //output stream for data and then simultaneously flushing the data
           PrintWriter out = new PrintWriter(clientSocket.getOutputStream(),true);
        
        
        //reading the data from the client(taking input)
         String message = in.readLine();
           System.out.println("Client says: " + message);
              System.out.println("Your message has been recieved by the server!");
        
        //closing both of the sockets
        clientSocket.close();
          serverSocket.close();
    }
}*/

//CLIENT CODE

//import statements for input-output
/import java.io.;
import java.net.*;

//class named Client
public class Client{
    
    //main class with Exception in case of any error from client's side
    public static void main(String[] args)throws IOException{
        
       //Class and object of clientSocket to get port number from client (localhost if same device) 
        ClientSocket clientSocket = new ClientSocket("localhost" , 1894);
        
        //output stream 1st then input so there isn't a deadlock
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(),true);
        
        //input stream
        BufferedReader in = new BufferedReader(new(clientSocket.getInputStream()));
          System.out.println("Client says hello!");
        
        //For Server's response
        String response = in.readLine();
          System.out.println("The server says: " + response);
        
        //closing the clientSocket
        clientSocket.close();
    }
}*/

//----------------------------------------------------------------------------------------------------------------------
//TCPClient when both server and client are on same device

//necessary import statements for input/output and networking principles 
*/import java.io.*;
import java.net.*;

//public class
public class Main{
   //method for client function
       public static void ClientFunc() throws Exception{
           //Socket class/object which depends on a localhost ip and a device port no.
            Socket socket = new Socket("localhost" , 8888);

              //For input from the server we use an InputStreamReader to convert raw bytes into characters and the socket gets it
               BufferedReader inputFromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));

             //To write to the server we'll use OutputStream with a PrintWriter class
                  PrintWriter outputToServer = new PrintWriter(socket.getOutputStream());

            //For transmitting the data between client-server through keyboard and giving input
                     BufferedWriter keyboard = new BufferedReader(new InputStreamReader(System.in));

              //Two String type objects to recieve message from Server and for sending message to Server 
                 String msgFromServer, msgToServer;

                   //infinite loop til function breaks
                    while(true){
                   System.out.println("Client says: ");

                  //To send the message to server we use the keyboard object which reads all the data further
                    msgToServer = keyboard.readLine();

                   //printing the message
                      outputToServer.println(msgToServer);

                  //if message to the server is empty then exiting 
                      if(msgToServer == null || msgToServer.equalsIgnoreCase("exit")) break;

                      //To receive the message from the server we use the inputFromServer object and read the data
                          msgFromServer = inputFromServer.readLine();

                  //If we send an empty message(no message) then exiting
                      if(msgFromServer == null || msgFromServer.equalsIgnoreCase("exit") break;

                         System.out.println("Server says: " + msgFromServer);
        }

        //Closing the socket and then client disconnects 
         socket.close();
         System.out.println("Client Offline...");
    }

     //Method for sending the message
     public static void send(String ip, int port, String msg){
       try(Socket socket = new Socket(ip, port);
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true))
       {
        out.println(msg);
         }
     }

 //Method for recieving the response 
     public static void getResponse(String ip, int port){
      try(Socket socket = new Socket(ip, port);
      BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())){
          String response = in.readLine();
          if(response != null){
             System.out.println("Server says: " + response);
            } else {
             System.out.println("No response from server.");
             }
         }
    }
}*/
//----------------------------------------------------------------------------------------------------------
//TCPServer (for same device)

/*import java.io.*;
import java.net.*;

public class Main {
    public static void ServerFunc() throws Exception {
        ServerSocket serverSocket = new ServerSocket(8888);
          System.out.println("Server online. Waiting for client to connect....");

          //accepting the client socket(client's request)
          Socket clientSocket = serverSocket.accept();
          System.out.println("Client Connected!");

          BufferedReader inputFromClient = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

          PrintWriter outputToClient = new PrintWriter(clientSocket.getOutputStream() , true);

          BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));

          String msgFromClient, msgToClient;

          while(true){
             msgFromClient = inputFromClient.readLine();
             if(msgFromClient == null || msgFromClient.equalsIgnoreCase("exit")) break;
              System.out.println("Client says: " + msgFromClient);

              System.out.println("You: ");
              msgToClient = keyboard.readLine();
              outputToClient.println(msgToClient);

               if(msgToClient == null || msgToClient.equalsIgnoreCase("exit")) break;
          }

          serverSocket.close();
          clientSocket.close();
          System.out.println("Server Offline....");
    }
}*/
//------------------------------------------------------------------------------------------------------------
//COMMANDS TO SERVER (QUIT/FILES/GET)
import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) throws Exception {
        ServerSocket serverSocket = new ServerSocket(8888);

        Socket socket = serverSocket.accept();

        BufferedReader inputFromClient = new BufferedReader(new InputStreamReader(socket.getInputStream()));

        PrintWriter outputToClient = new PrintWriter(socket.getOutputStream(), true);

        String msgFromClient, msgToClient = "";

        while (true) {
            msgFromClient = inputFromClient.readLine();

            if (msgFromClient.equalsIgnoreCase("quit")) {
                break;
            } else if (msgFromClient.split(" ")[0].equalsIgnoreCase("files")) {
                File folder = new File("C:\\Users\\Abdullah\\Desktop\\java-zain\\files");

                File[] files = folder.listFiles();

                StringBuilder FilesNamesList = new StringBuilder();

                for (File file : files) {
                    FilesNamesList.append(file.getName()).append("\n");
                }
                msgToClient = FilesNamesList.toString();

            } else if (msgFromClient.split(" ")[0].equalsIgnoreCase("get")) {
                String fileName = msgFromClient.split(" ")[1];

                BufferedReader br = new BufferedReader(
                        new FileReader("C:\\Users\\Abdullah\\Desktop\\java-zain\\files\\" + fileName));

                StringBuilder fileContent = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    fileContent.append(line).append("\n");
                }
                br.close();
                msgToClient = fileContent.toString();

            }
            System.out.println("Client Says: " + msgFromClient);
            outputToClient.println(msgToClient);
            msgToClient = " ";
        }
        socket.close();
        serverSocket.close();
        System.out.println("Server going offline...");

    }
}
//------------------------------------------------------------------------------------------------------------
//COMMANDS TO GIVE TO THE SERVER (CLIENT CODE)
import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) throws Exception {
        Socket socket = new Socket("localhost", 8888);
        System.out.println("Client successfully connected to server!");

        BufferedReader inputFromServer = new BufferedReader(
                new InputStreamReader(socket.getInputStream()));

        PrintWriter outputToServer = new PrintWriter(socket.getOutputStream(), true);

        BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));

        String msgToServer, msgFromServer;

        while (true) {
          System.out.print("You: ");
          msgToServer = keyboard.readLine();
      
          outputToServer.println(msgToServer);
      
          if (msgToServer.equalsIgnoreCase("quit")) break;
      
        
          StringBuilder response = new StringBuilder();
          String line;
          while (!((line = inputFromServer.readLine()).equals(""))) {
              response.append(line).append("\n");
          }
      
          System.out.println("Server says:\n" + response.toString());
      }
      

        socket.close();
        System.out.println("Client offline...");
    }
}
//------------------------------------------------------------------------------------------------------------
//MulitClient Server java
import java.io.*;
import java.net.*;
import java.util.*;

public class Main {
    //A private hashSet of the printWriter for clientWriters that handles broadcasting the message
    private static Set<PrintWriter> clientWriters = new HashSet<>();

    public static void main(String[] args) throws Exception {
        //Starting the Server
        ServerSocket serverSocket = new ServerSocket(8888);
        System.out.println("Server Online! Waiting for client to connect.");

        while (true) {
            //running the loop for the server
            Socket socket = serverSocket.accept();
            //accepting client's connection
            System.out.println("Client connected successfully!");

            //a clientHandler that takes a socket of a specific client and starts a new Thread to serve it
            new ClientHandler(socket).start();
        }
    }

    //Per-Client Handling, extended by the serving Thread for input and output
    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;

        //Constructor which handles the socket of a client, it must be public since in main, we need to start 
        //the thread
        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                /* To write the clientWriters to the global set and make sure two clients don't override each
                other's data
                 */
                synchronized (clientWriters) {
                    clientWriters.add(out);
                }
 
                //Message Reading loop
                String message;
                while ((message = in.readLine()) != null) {
                    System.out.println("Response: " + message);

                    synchronized (clientWriters) {
                        /* iterate through each synchronized clientWriter and if a writer does not belong to 
                          the sender itself (out) then send the message */
                        for (PrintWriter writer : clientWriters) {
                            if (writer != out) {
                                writer.println(message);
                            }
                        }
                    }
                }
                
                //Exception Handling
            } catch (IOException e) {
                System.out.println("Error." + e.getMessage());
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                }
                //finally removing the sender and breaking operation
                synchronized (clientWriters) {
                    clientWriters.remove(out);
                }
            }
        }
    }
}
//--------------------------------------------------------------------------------------------------------------
//MULTICLIENT CLIENT CODE
import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) throws Exception {
        // connect to server
        Socket socket = new Socket("localhost", 8888);
        System.out.println("Connected to server.");

        // for sending messages
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
        // for receiving messages
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        // for reading from keyboard
        BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));

        // separate thread for listening to server messages
        new Thread(() -> {
            try {
                String response;
                while ((response = in.readLine()) != null) {
                    System.out.println("Server: " + response);
                }
            } catch (IOException e) {
                System.out.println("Disconnected from server.");
            }
        }).start();

        // main thread: read user input and send to server
        String message;
        while ((message = userInput.readLine()) != null) {
            out.println(message);

            if (message.equalsIgnoreCase("quit")) {
                break;
            }
        }

        socket.close();
    }
}

