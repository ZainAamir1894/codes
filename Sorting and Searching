//Sorting Names Using Selection Sort
/*public class SelectionSort{
    public static void printArray(String arr[]){
        for(int i=0; i<arr.length; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    public static void main(String[] args){
        String[] arr = {"zain" , "abdullah" , "mubashir" , "haris"};
    

                //selection sort
           for(int i=0; i< arr.length-1; i++){
               int smallest = i;
               for(int j=i+1; j< arr.length; j++) {
                   if (arr[smallest].compareTo(arr[j]) > 0) {
                       smallest = j;

                   }
               }
                    //swap
                       String temp = arr[smallest];
                       arr[smallest]=  arr[i];
                       arr[i] = temp;
           }
           printArray(arr);
    }*/

//---------------------------------------------------------------------------------------------------------
//BUBBLE SORTING
/*import java.util.*;

//define class
public class Sorting {
    public static void printArray(int arr[]){
        for (int i=0; i<arr.length ; i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {9, 4, 1, 3, 7}; //this is our given array and we have to sort it

        //bubble sort
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {

                    //swapping
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;


                }
            }
        }
}*/
//-------------------------------------------------------------------------------------------------------------
//Linear Search By Taking Input From User
/*import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner inp = new Scanner(System.in);

        //Entering the number of Students in a list
        System.out.println("Enter number of Students: ");
        int n = inp.nextInt();
        inp.nextLine();

        //Storing that number in an array of Strings
        String[] arr = new String[n];

        //Entering names
        System.out.println("Enter " + n + " names of Students: ");
        for (int i = 0; i < n; i++) {
            //Storing names in the array
            arr[i] = inp.nextLine();
        }

        //Searching a name
        System.out.println("Enter name to Search: ");
        String FindingName = inp.nextLine();

        //Searching the position at which the name sits
        int pos = -1;
        for (int i = 0; i < n; i++) {
            if (arr[i].equalsIgnoreCase(FindingName)) {
                pos = i;
                break;
            }
        }

        if (pos == -1) {
            System.out.println("Name not found in the array");
        } else {
            System.out.println("Name found at position: " + pos);
        }
    }
}*/

//---------------------------------------------------------------------------------------------------
//LOGICAL SORTING
/*class LinkedListNode {
    int data;
    int index;

    LinkedListNode(int d, int n) {
        data = d;
        index = n;
    }
}

public class LinkedListSort {
    public static void main(String[] args) {
        LinkedListNode[] list = {
            new LinkedListNode(3, 2),
            new LinkedListNode(1, 3),
            new LinkedListNode(4, -1),
            new LinkedListNode(2, 0)
        };

        int StartIndex = -1;
        boolean Next[] = new boolean[list.length];

        // Mark which nodes are "pointed to"
        for (LinkedListNode node : list) {
            if (node.index != -1) {
                Next[node.index] = true;
            }
        }

        // Find the node that is not pointed to -> head of the list
        for (int i = 0; i < list.length; i++) {
            if (!Next[i]) {
                StartIndex = i;
                break;
            }
        }

        // Traverse from StartIndex
        int index = StartIndex;
        while (index != -1) {
            System.out.println(list[index].data);
            index = list[index].index;
        }
    }
}*/
